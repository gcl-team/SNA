using Microsoft.Extensions.Logging;
using SimNextgenApp.Configurations;
using SimNextgenApp.Core;
using SimNextgenApp.Core.Strategies;
using SimNextgenApp.Core.Utilities;
using SimNextgenApp.Demo.CustomModels;
using SimNextgenApp.Statistics;

namespace SimNextgenApp.Demo.Scenarios;

internal static class SimpleServerAndGenerator
{
    public static void RunDemo(ILoggerFactory loggerFactory, double meanArrivalSeconds) 
    {
        var programLogger = loggerFactory.CreateLogger("Program");

        // 1. Generator Configuration
        Func<Random, TimeSpan> interArrivalTimeFunc = (rnd) =>
        {
            return TimeSpan.FromSeconds(-meanArrivalSeconds * Math.Log(1.0 - rnd.NextDouble()));
        };
        Func<Random, MyLoad> loadFactoryFunc = (rnd) => new MyLoad();
        var generatorConfig = new GeneratorStaticConfig<MyLoad>(interArrivalTimeFunc, loadFactoryFunc)
        {
            IsSkippingFirst = false
        };

        // 2. Server Configuration
        int serverCapacity = 1; // Single server
        Func<MyLoad, Random, TimeSpan> serviceTimeFunc = (load, rnd) =>
        {
            double meanServiceSeconds = 8.0;
            return TimeSpan.FromSeconds(-meanServiceSeconds * Math.Log(1.0 - rnd.NextDouble()));
        };

        // Create ServerStaticConfig using its constructor and then set Capacity if not infinite
        var serverConfig = new ServerStaticConfig<MyLoad>(serviceTimeFunc)
        {
            Capacity = serverCapacity
        };

        // 3. Create the Composite Model
        var simpleSystem = new GeneratorAndServerModel(
            generatorConfig, 123,
            serverConfig, 456,
            loggerFactory);

        // 4. Create a Run Strategy
        double runDuration = 100.0;
        double warmupDuration = 20.0;
        var runStrategy = new DurationRunStrategy(runDuration, warmupDuration);

        // 5. Create a Memory Tracer to capture simulation events
        //    The MemoryTracer records every event that is scheduled and executed.
        var tracer = new MemoryTracer();

        // 6. Create the Simulation Profile to bundle all settings for a reproducible run
        //    This is useful for managing complex simulations with many parameters.
        var simulationProfile = new SimulationProfile(
            model: simpleSystem,
            runStrategy: runStrategy,
            "Simple Server and Generator Profile",
            SimulationTimeUnit.Seconds,
            loggerFactory: loggerFactory,
            tracer: tracer
        );

        // 7. Create and run the Simulation Engine
        var simulationEngine = new SimulationEngine(simulationProfile);

        SimulationResult? simulationResult = null;
        programLogger.LogInformation($"Starting simulation run for {runDuration} units, warmup {warmupDuration} units...");
        try
        {
            simulationResult = simulationEngine.Run();
        }
        catch (Exception ex)
        {
            programLogger.LogCritical(ex, "Simulation run failed!");
        }

        // 9. Report results and diagnostics
        programLogger.LogInformation($"\n--- Simulation Finished --- {simulationResult}");

        programLogger.LogInformation("\n--- Generator Stats ---");
        programLogger.LogInformation($"Loads Generated by '{simpleSystem.LoadGenerator.Name}': {simpleSystem.LoadGenerator.LoadsGeneratedCount}");

        var serverReporter = new ServerConsoleReporter<MyLoad>(
            simpleSystem.ServicePoint,
            simpleSystem.ServicePointObserver,
            programLogger);
        serverReporter.Report();

        programLogger.LogInformation($"\n--- System Stats ---");
        programLogger.LogInformation($"Total Balked Loads (post-warmup): {simpleSystem.BalkedLoadsCount}");

        Console.WriteLine("\n--- Events recorded by MemoryTracer ---");
        tracer.PrintToConsole();
    }
}